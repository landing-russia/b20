---
import { getCollection, CollectionEntry } from "astro:content"
import Base from "@layouts/Base.astro"
import RelatedPosts from "@components/RelatedPosts.astro"
import { formatBlogPosts, formatDate } from "@utils"

export async function getStaticPaths() {
  const allPosts = await getCollection("blog")
  const formattedPosts = formatBlogPosts(allPosts)
  return formattedPosts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
    },
  }))
}
interface Props {
  post: CollectionEntry<"blog">
}
const { post } = Astro.props
const { title, date, tags } = post.data
const { Content } = await post.render()

const allPosts = await getCollection("blog")
const formattedPosts: CollectionEntry<"blog">[] = formatBlogPosts(allPosts, {
  sortByDate: false,
})

// dark.some(r => dark2.includes(r))

const relatedPosts = formattedPosts
  .filter(
    (post) =>
      post.data.tags.some((r) => tags.includes(r)) && post.data.title !== title
  )
  .slice(0, 3)
---

<Base {title}>
  <div class="prose lg:prose-xl prose-headings:text-gray-800 dark:prose-headings:text-gray-200 prose-p:text-gray-500 dark:prose-p:text-gray-400 max-w-prose mx-auto p-4 prose-strong:text-gray-600 dark:prose-strong:text-gray-300 prose-img:rounded-xl prose-ul:list-none prose-ul:pl-0 prose-li:pl-0 dark:prose-invert">
    <h1>{title}</h1>
    <p><small>{formatDate(date)}</small></p>
    <Content />
  </div>
  {
    tags &&
      tags.map((tag) => (
        <>
          <a href={`/blog/tag/${tag}/`}>{tag}</a>
          <br />
        </>
      ))
  }
  {
    relatedPosts.length > 0 && (
      <aside class="container" aria-label="Related posts">
        <h2>Related Posts</h2>
        <RelatedPosts {relatedPosts} />
      </aside>
    )
  }
</Base>
